// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid())
  name     String
  email    String    @unique
  password String
  role     Role?     @default(CLIENT)
  vehicles Vehicle[]

  passwordResetCode       String?
  passwordResetCodeExpiry DateTime?

  isVerified             Boolean   @default(false)
  verificationCode       String?
  verificationCodeExpiry DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Payment   Payment[]
}

model Vehicle {
  id           String        @id @default(uuid())
  plateNumber  String        @unique
  type         String
  owner        User          @relation(fields: [ownerId], references: [id])
  ownerId      String
  reservations Reservation[]
  Payment      Payment[]
}

model ParkingSlot {
  id           String        @id @default(uuid())
  name         String        @unique
  location     String
  status       SlotStatus    @default(AVAILABLE)
  reservations Reservation[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Payment      Payment[]
}

model Reservation {
  id        String            @id @default(uuid())
  vehicle   Vehicle           @relation(fields: [vehicleId], references: [id])
  vehicleId String
  slot      ParkingSlot       @relation(fields: [slotId], references: [id])
  slotId    String
  status    ReservationStatus @default(PENDING)
  startTime DateTime?
  endTime   DateTime?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  Payment   Payment[]
}

model Payment {
  id     String        @id @default(uuid())
  amount Float
  status PaymentStatus @default(PENDING)

  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId String

  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])
  vehicleId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  slot   ParkingSlot @relation(fields: [slotId], references: [id])
  slotId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  CLIENT
}

enum SlotStatus {
  AVAILABLE
  OCCUPIED
}

enum ReservationStatus {
  PENDING
  APPROVED
  FINISHED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

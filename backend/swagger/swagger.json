{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Restful API starter",
    "description": "this is a starter template for building RESTful APIs with Node.js and Express. It includes authentication, authorization, and user management features."
  },
  "servers": [
    {
      "url": "http://localhost:8000/api/v1"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication/Authorization Endpoints."
    },
    {
      "name": "ParkingSlot",
      "description": "Manage parking slots"
    },
    {
      "name": "Vehicle",
      "description": "Vehicle management"
    },
    {
      "name": "Reservation",
      "description": "Reservation operations"
    },
    {
      "name": "Payment",
      "description": "Payment processing"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "Register a new user",
        "description": "Create a new user account",
        "operationId": "registerUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "409": {
            "description": "User already exists"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "description": "Authenticate user and return access token",
        "operationId": "loginUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid credentials"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/verify-email": {
      "post": {
        "tags": ["Auth"],
        "summary": "Verify email",
        "description": "Verify user's email with verification code",
        "operationId": "verifyEmail",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email verified successfully"
          },
          "400": {
            "description": "Invalid or expired code"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/resend-verification-email": {
      "post": {
        "tags": ["Auth"],
        "summary": "Resend verification email",
        "description": "Resend email verification code",
        "operationId": "resendVerificationEmail",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendVerificationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification email resent"
          },
          "400": {
            "description": "Invalid email"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/forgot-password": {
      "post": {
        "tags": ["Auth"],
        "summary": "Request password reset",
        "description": "Send password reset code to email",
        "operationId": "forgotPassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset code sent to email"
          },
          "400": {
            "description": "Invalid email"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "tags": ["Auth"],
        "summary": "Reset password",
        "description": "Reset user password using verification code",
        "operationId": "resetPassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful"
          },
          "400": {
            "description": "Invalid or expired code"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get current user info",
        "description": "Get authenticated user's information",
        "operationId": "getCurrentUser",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "User info retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },

    "/parking-slots": {
      "get": {
        "tags": ["ParkingSlot"],
        "summary": "Get all parking slots",
        "description": "Retrieve all parking slots with optional filtering and pagination",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Filter by slot status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["AVAILABLE", "OCCUPIED", "MAINTENANCE"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of parking slots",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParkingSlotResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": ["ParkingSlot"],
        "summary": "Create new parking slot",
        "description": "Create a new parking slot (Admin only)",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateParkingSlotDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Parking slot created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParkingSlotResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden (non-admin users)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/parking-slots/{slotId}": {
      "get": {
        "tags": ["ParkingSlot"],
        "summary": "Get parking slot by ID",
        "description": "Get detailed information about a specific parking slot",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "slotId",
            "in": "path",
            "required": true,
            "description": "Parking slot ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Parking slot details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParkingSlotResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Parking slot not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": ["ParkingSlot"],
        "summary": "Delete parking slot",
        "description": "Delete a parking slot (Admin only)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "slotId",
            "in": "path",
            "required": true,
            "description": "Parking slot ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Parking slot deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden (non-admin users)"
          },
          "404": {
            "description": "Parking slot not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/parking-slots/{slotId}/status": {
      "patch": {
        "tags": ["ParkingSlot"],
        "summary": "Update parking slot status",
        "description": "Update the status of a parking slot (Admin only)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "slotId",
            "in": "path",
            "required": true,
            "description": "Parking slot ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateParkingSlotStatusDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Parking slot status updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParkingSlotResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden (non-admin users)"
          },
          "404": {
            "description": "Parking slot not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },

    "/vehicles/create": {
      "post": {
        "tags": ["Vehicle"],
        "summary": "Create a new vehicle",
        "description": "Register a new vehicle for the authenticated user",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVehicleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vehicle created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/vehicles/{userId}/vehicles": {
      "get": {
        "tags": ["Vehicle"],
        "summary": "Get user vehicles",
        "description": "Get all vehicles for a specific user (admin can access any user's vehicles)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID (optional - if not provided, returns vehicles for authenticated user)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of vehicles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VehicleResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden (if client tries to access another user's vehicles)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/vehicles/{id}": {
      "get": {
        "tags": ["Vehicle"],
        "summary": "Get vehicle by ID",
        "description": "Get detailed information about a specific vehicle",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Vehicle ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vehicle details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden (if client tries to access another user's vehicle)"
          },
          "404": {
            "description": "Vehicle not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/vehicles/update/{id}": {
      "put": {
        "tags": ["Vehicle"],
        "summary": "Update vehicle",
        "description": "Update vehicle information",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Vehicle ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVehicleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vehicle updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden (if client tries to update another user's vehicle)"
          },
          "404": {
            "description": "Vehicle not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/vehicles/delete/{id}": {
      "delete": {
        "tags": ["Vehicle"],
        "summary": "Delete vehicle",
        "description": "Delete a vehicle (only allowed for vehicle owner)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Vehicle ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vehicle deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden (if client tries to delete another user's vehicle)"
          },
          "404": {
            "description": "Vehicle not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },

    "/reservations": {
      "post": {
        "tags": ["Reservation"],
        "summary": "Request a new reservation",
        "description": "Create a new parking slot reservation request",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReservationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Reservation requested successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Vehicle or parking slot not found"
          },
          "409": {
            "description": "Slot already reserved"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "get": {
        "tags": ["Reservation"],
        "summary": "Get all reservations",
        "description": "Retrieve all reservations (Admin only) with optional filtering",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Filter by reservation status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "PENDING",
                "APPROVED",
                "ACTIVE",
                "COMPLETED",
                "CANCELLED"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of reservations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReservationResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden (non-admin users)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/reservations/me": {
      "get": {
        "tags": ["Reservation"],
        "summary": "Get my reservations",
        "description": "Get all reservations for the authenticated user",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user's reservations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReservationResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/reservations/{id}": {
      "get": {
        "tags": ["Reservation"],
        "summary": "Get reservation by ID",
        "description": "Get detailed information about a specific reservation",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Reservation ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reservation details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden (accessing other user's reservation)"
          },
          "404": {
            "description": "Reservation not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/reservations/{id}/approve": {
      "post": {
        "tags": ["Reservation"],
        "summary": "Approve reservation",
        "description": "Approve a pending reservation (Admin only)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Reservation ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reservation approved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Reservation not in PENDING status"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden (non-admin users)"
          },
          "404": {
            "description": "Reservation not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/reservations/{id}/end": {
      "post": {
        "tags": ["Reservation"],
        "summary": "End reservation",
        "description": "Mark an active reservation as completed (Admin only)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Reservation ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reservation ended and payment initiated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Reservation not in ACTIVE status"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden (non-admin users)"
          },
          "404": {
            "description": "Reservation not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/payments": {
      "get": {
        "tags": ["Payment"],
        "summary": "Get all payments",
        "description": "Retrieve all payments with optional filtering and pagination (Admin only)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Filter by payment status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["PENDING", "COMPLETED", "FAILED", "REFUNDED"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of payments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPaymentsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden (non-admin users)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/payments/{id}/approve": {
      "post": {
        "tags": ["Payment"],
        "summary": "Approve payment",
        "description": "Approve a pending payment (Admin only)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Payment ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment approved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Payment not in PENDING status"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden (non-admin users)"
          },
          "404": {
            "description": "Payment not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegisterDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "minLength": 6,
            "example": "password123"
          }
        },
        "required": ["name", "email", "password"]
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "password123"
          }
        },
        "required": ["email", "password"]
      },
      "VerifyEmailDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "123456"
          }
        },
        "required": ["code"]
      },
      "ResendVerificationDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          }
        },
        "required": ["email"]
      },
      "ForgotPasswordDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          }
        },
        "required": ["email"]
      },
      "ResetPasswordDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "123456"
          },
          "newPassword": {
            "type": "string",
            "format": "password",
            "minLength": 6,
            "example": "newpassword123"
          }
        },
        "required": ["code", "newPassword"]
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "isVerified": {
            "type": "boolean"
          },
          "role": {
            "type": "string",
            "enum": ["ADMIN", "CLIENT"],
            "example": "CLIENT"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserResponse"
          },
          "access_token": {
            "type": "string",
            "description": "JWT access token"
          }
        }
      },

      "CreateParkingSlotDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "A1",
            "description": "Unique identifier for the parking slot"
          },
          "location": {
            "type": "string",
            "example": "Near entrance",
            "description": "Physical location description"
          }
        },
        "required": ["name", "location"]
      },
      "UpdateParkingSlotStatusDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["AVAILABLE", "OCCUPIED", "MAINTENANCE"],
            "example": "MAINTENANCE"
          }
        },
        "required": ["status"]
      },
      "ParkingSlotResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": ["AVAILABLE", "OCCUPIED", "MAINTENANCE"]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },

      "CreateVehicleDto": {
        "type": "object",
        "properties": {
          "plateNumber": {
            "type": "string",
            "example": "RAA123A"
          },
          "type": {
            "type": "string",
            "example": "Sedan",
            "enum": ["Sedan", "SUV", "Truck", "Motorcycle", "Other"]
          }
        },
        "required": ["plateNumber", "type"]
      },
      "UpdateVehicleDto": {
        "type": "object",
        "properties": {
          "plateNumber": {
            "type": "string",
            "example": "RAA123B"
          },
          "type": {
            "type": "string",
            "example": "SUV",
            "enum": ["Sedan", "SUV", "Truck", "Motorcycle", "Other"]
          }
        }
      },
      "VehicleResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "plateNumber": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "ownerId": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },

      "CreateReservationDto": {
        "type": "object",
        "properties": {
          "vehicleId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the vehicle to reserve"
          },
          "slotId": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the parking slot to reserve"
          }
        },
        "required": ["vehicleId", "slotId"]
      },
      "ReservationResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "vehicleId": {
            "type": "string",
            "format": "uuid"
          },
          "slotId": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": ["PENDING", "APPROVED", "ACTIVE", "COMPLETED", "CANCELLED"]
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "description": "When the reservation becomes active"
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "description": "When the reservation ends"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "vehicle": {
            "$ref": "#/components/schemas/VehicleResponse"
          },
          "parkingSlot": {
            "$ref": "#/components/schemas/ParkingSlotResponse"
          }
        }
      },

      "PaymentResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "description": "Payment amount in the system's currency"
          },
          "status": {
            "type": "string",
            "enum": ["PENDING", "COMPLETED", "FAILED", "REFUNDED"],
            "description": "Current payment status"
          },
          "method": {
            "type": "string",
            "enum": ["CASH", "CARD", "MOBILE_MONEY", "BANK_TRANSFER"],
            "description": "Payment method used"
          },
          "reservationId": {
            "type": "string",
            "format": "uuid",
            "description": "Associated reservation ID"
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "User who made the payment"
          },
          "transactionReference": {
            "type": "string",
            "description": "External payment processor reference"
          },
          "approvedById": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "Admin who approved the payment"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "reservation": {
            "$ref": "#/components/schemas/ReservationResponse"
          }
        }
      },
      "PaginatedPaymentsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentResponse"
            }
          },
          "meta": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer",
                "description": "Total number of items"
              },
              "page": {
                "type": "integer",
                "description": "Current page number"
              },
              "limit": {
                "type": "integer",
                "description": "Items per page"
              },
              "totalPages": {
                "type": "integer",
                "description": "Total number of pages"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
